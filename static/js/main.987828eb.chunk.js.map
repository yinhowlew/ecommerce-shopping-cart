{"version":3,"sources":["reducers.js","util.js","actions.js","constants.js","components/Products.js","components/Filter.js","components/Basket.js","components/Copyright.js","App.js","serviceWorker.js","index.js"],"names":["initialState","products","filteredProducts","size","sort","cartItems","num","Math","round","toFixed","toLocaleString","addToCart","items","product","dispatch","slice","productAlreadyInCart","forEach","cp","id","count","push","localStorage","setItem","JSON","stringify","type","payload","Products","useSelector","state","productReducer","useDispatch","useEffect","fetch","process","then","res","json","data","productItems","map","className","key","href","onClick","src","sku","alt","title","util","price","Filter","length","value","onChange","e","a","b","sortProducts","target","filter","availableSizes","indexOf","toUpperCase","filterProducts","Basket","style","marginLeft","item","float","reduce","c","alert","Copyright","Component","App","getItem","parse","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.987828eb.chunk.js","sourcesContent":["import { \n\tFETCH_PRODUCTS, FILTER_PRODUCTS_BY_SIZE, SORT_PRODUCTS, ADD_TO_CART, REMOVE_FROM_CART, GET_LOCAL_CART\n} from './constants.js';\n\nconst initialState = {\n\tproducts: [],\n\tfilteredProducts: [],\n\tsize: '',\n\tsort: '',\n\tcartItems: [],\n}\n\nexport const productReducer = (state=initialState, action) => {\n\tswitch(action.type) {\n\t\tcase FETCH_PRODUCTS:   \n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tproducts: action.payload,\n\t\t\t\t// below is because Product component uses filteredProducts state to populate\n\t\t\t\tfilteredProducts: action.payload\n\t\t\t})\n\t\tcase FILTER_PRODUCTS_BY_SIZE:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tsize: action.payload.size,\n\t\t\t\tfilteredProducts: action.payload.filteredProducts\n\t\t\t})\n\t\tcase SORT_PRODUCTS:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tsort: action.payload.sort,\n\t\t\t\tfilteredProducts: action.payload.filteredProducts\n\t\t\t})\n\t\tcase ADD_TO_CART:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tcartItems: action.payload.cartItems\n\t\t\t})\n\t\tcase REMOVE_FROM_CART:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tcartItems: action.payload.cartItems\n\t\t\t})\n\t\tcase GET_LOCAL_CART:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tcartItems: action.payload\n\t\t\t})\n\t\tdefault: \n\t\t\treturn state; \n\t}\t\n}\n\n\n\n\n\n    // this.state = {\n    //   size: \"\",\n    //   sort: \"\",\n    //   cartItems: [],\n    //   products: [],\n    //   filteredProducts: []\n    // };","export default {\n    formatCurrency: function (num) {\n        return '$' + (Math.round(num * 100) / 100).toFixed(2).toLocaleString() + ' ';\n    }\n}\n\n\n\n//  previous bug: return '$' + Number(num.toFixed(2)).toLocaleString() + ' ';","import { \n\tFETCH_PRODUCTS, FILTER_PRODUCTS_BY_SIZE, SORT_PRODUCTS, ADD_TO_CART, REMOVE_FROM_CART, GET_LOCAL_CART\n} from './constants.js';\n\n\nexport const fetchProducts = () => (dispatch) => {\n\t  // fetch(\"http://localhost:8000/products\")\n   //    .then(res => res.json())\n   //    .catch(err =>\n      fetch(process.env.PUBLIC_URL + \"/db.json\")\n      .then(res => res.json())\n      .then(data => dispatch({\n      \ttype: FETCH_PRODUCTS,\n      \tpayload: data.products\n      }))\n}\n\nexport const filterProducts = (products, size) => (dispatch) => {\n\treturn dispatch({\n\t\ttype: FILTER_PRODUCTS_BY_SIZE,\n\t\tpayload: {\n\t\t\tsize: size,\n\t\t\tfilteredProducts: (size === '') ? products : products.filter(\n            a => a.availableSizes.indexOf(size.toUpperCase()) >= 0)\n\t\t}\n\t})\n}\n\nexport const sortProducts = (filteredProducts, sort) => (dispatch) => {\n\t// below is an edge case of REACT\n\t// when making a new copy of array, then updating the original array after sorting \n\t// react will recognise change in state and re-render\n\t// otherwise, even though we updated the state correctly, react doesn't re-render\n\tconst products = filteredProducts.slice();\n\n\tif (sort !== \"\") {\n        products.sort((a, b) =>\n          sort === \"lowestprice\"\n            ? (a.price > b.price\n\t          ? 1\n\t          : -1)\n            : (a.price < b.price\n           \t ? 1\n           \t : -1)\n        );\n      } else {\n        products.sort((a, b) => (a.id > b.id ? 1 : -1));\n      }\n\n\treturn dispatch({\n\t\ttype: SORT_PRODUCTS,\n\t\tpayload: {\n\t\t\tsort: sort,\n\t\t\tfilteredProducts: products\n\t\t}\n\t})\n}\n\n// items are things in cart\n// product is what we want to add to cart\nexport const addToCart = (items, product) => (dispatch) => {\n      const cartItems = items.slice();\n      let productAlreadyInCart = false;\n\n      cartItems.forEach(cp => {\n        if (cp.id === product.id) {\n          cp.count += 1;\n          productAlreadyInCart = true;\n        }\n      });\n\n      if (!productAlreadyInCart) {\n        // meaning pushing an object with properties of product and an additional property of count\n        // into the array of objects, called cartItems\n        cartItems.push({ ...product, count: 1 });\n      }\n      // localStorage is used so that if user refreshes the page, cart doesn't get refreshed\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n      return dispatch({\n      \ttype: ADD_TO_CART,\n      \tpayload: {\n      \t\tcartItems: cartItems\n      \t}\n      })\n}\n\nexport const removeFromCart = (items, product) => (dispatch) => {\n      // so the new cartItems will exclude the removed item\n      const cartItems = items.slice().filter(a => a.id !== product.id);\n      // the new localStorage will have the new cartItems\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n      return dispatch({\n      \ttype: REMOVE_FROM_CART,\n      \tpayload: {\n      \t\tcartItems: cartItems\n      \t}\n      })\n}\n\nexport const getLocalCart = () => (dispatch) => {\n\treturn dispatch({\n\t\ttype: GET_LOCAL_CART,\n\t\tpayload: JSON.parse(localStorage.getItem(\"cartItems\"))\n\t})\n\n    // if (localStorage.getItem(\"cartItems\")) {\n    //   this.setState({\n    //     cartItems: JSON.parse(localStorage.getItem(\"cartItems\"))\n    //   });\n    // }\n}\n\n\n","\nexport const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\nexport const FILTER_PRODUCTS_BY_SIZE = 'FILTER_PRODUCTS_BY_SIZE';\nexport const SORT_PRODUCTS = 'SORT_PRODUCTS';\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const GET_LOCAL_CART = \"GET_LOCAL_CART\";\n","import React, { useEffect } from 'react';\nimport util from '../util';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchProducts, addToCart  } from '../actions'\n\n// const mapStateToProps = state => { \n//     return {\n//         products: state.productReducer.filteredProducts,\n//         cartItems: state.productReducer.cartItems\n//     }\n// }\n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         fetchProducts: () => dispatch(fetchProducts()),\n//         addToCart: (a,b) => dispatch(addToCart(a,b))\n//     }  // return an object\n// } \n\nconst Products = () => {\n    // componentDidMount() {\n    //     this.props.fetchProducts();\n    // }\n    const products = useSelector(state => state.productReducer.filteredProducts);\n    const cartItems = useSelector(state => state.productReducer.cartItems);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchProducts())\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const productItems = products.map(product => (\n        <div className=\"col-md-4\" key={product.id}>\n            <div className=\"thumbnail text-center\">\n                <a \n                    href={`#${product.id}`} \n                    onClick={() => dispatch(addToCart(cartItems, product))}\n                    // onClick={()=>this.props.addToCart(this.props.cartItems, product)}\n                >\n                    <img \n                        src={`${process.env.PUBLIC_URL}/products/${product.sku}_2.jpg`} \n                        alt={product.title} \n                    />\n                    <p>{product.title}</p>                        \n                </a>\n                <b>{util.formatCurrency(product.price)}</b>\n                <button \n                    className=\"btn btn-primary\" \n                    onClick={() => dispatch(addToCart(cartItems, product))}\n                    // onClick={()=>this.props.addToCart(this.props.cartItems, product)}>\n                >\n                    Add to cart\n                </button>\n            </div>\n        </div>\n    ));\n\n    return (\n        <div className=\"row\">\n            {productItems}\n        </div>\n    )\n}\n\nexport default Products;\n// export default connect(mapStateToProps, mapDispatchToProps)(Products);\n\n\n\n\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterProducts, sortProducts  } from '../actions'\n\n\n// const mapStateToProps = state => { \n//     return {\n//         products: state.productReducer.products,\n//         filteredProducts: state.productReducer.filteredProducts,\n//         size: state.productReducer.size,\n//         sort: state.productReducer.sort\n//     }\n// }\n// !!! FIXED BELOW BECAUSE WE NEED TO ADD PARAMETERS\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         filterProducts: (a,b) => dispatch(filterProducts(a,b)),\n//         sortProducts: (a,b) => dispatch(sortProducts(a,b))\n//     }  \n// } \n\n\nconst Filter = () => {\n    const products = useSelector(state => state.productReducer.products);\n    const filteredProducts = useSelector(state => state.productReducer.filteredProducts);\n    const size = useSelector(state => state.productReducer.size);        \n    const sort = useSelector(state => state.productReducer.sort);\n\n    const dispatch = useDispatch();\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"bot-pad col-md-4\">\n                {`${filteredProducts.length} products found.`}\n            </div>\n            <div className=\"bot-pad col-md-4\">\n                <label>Order by\n           <select className=\"form-control\" value={sort} onChange={(e) => dispatch(sortProducts(filteredProducts, e.target.value))}>\n                        <option value=\"\">Select</option>\n                        <option value=\"lowestprice\">Lowest to highest</option>\n                        <option value=\"highestprice\">Highest to lowest</option>\n                    </select>\n                </label>\n            </div>\n            <div className=\"bot-pad col-md-4\">\n                <label > Filter Size\n           <select className=\"form-control\" value={size} onChange={(e) => dispatch(filterProducts(products, e.target.value))}>\n                        <option value=\"\">ALL</option>\n                        <option value=\"x\">XS</option>\n                        <option value=\"s\">S</option>\n                        <option value=\"m\">M</option>\n                        <option value=\"l\">L</option>\n                        <option value=\"xl\">XL</option>\n                        <option value=\"xxl\">XXL</option>\n                    </select>\n                </label>\n            </div>\n        </div>\n    )\n}\n\nexport default Filter;\n\n\n\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { removeFromCart  } from '../actions'\nimport util from '../util'\n\n// const mapStateToProps = state => { \n//     return {\n//         cartItems: state.productReducer.cartItems,\n//     }\n// }\n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         removeFromCart: (a,b) => dispatch(removeFromCart(a,b)),\n//     }  \n// } \n\nconst Basket = () => {\n    const cartItems = useSelector(state => state.productReducer.cartItems);\n    // const { cartItems } = this.props;\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"alert alert-info\">\n            {cartItems.length === 0\n                ? \"Basket is empty\" :\n                <div>You have {cartItems.length} items in the basket. <hr /></div>\n            }\n            {cartItems.length > 0 &&\n                <div>\n                    <ul style={{ marginLeft: -25 }}>\n                        {cartItems.map(item => (\n                            <li key={item.id}>\n                                <b>{item.title}</b>\n                                <button style={{ float: 'right' }} className=\"btn btn-danger btn-xs\"\n                                    onClick={() => dispatch(removeFromCart(cartItems, item))}>X</button>\n                                <br />\n                                {item.count} X {util.formatCurrency(item.price)}\n                            </li>))\n                        }\n                    </ul>\n\n                    <b>Sum: {util.formatCurrency(cartItems.reduce((a, c) => (a + c.price * c.count), 0))}\n                    </b>\n                    <button onClick={() => alert('Pending: implement checkout page.')} className=\"btn btn-primary\">checkout</button>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Basket;\n","import React, { Component } from \"react\";\nexport default class Copyright extends Component {\n  render() {\n    return (\n      <div>\n        <h4>Key Learnings</h4>\n        <ul>\n          <li>\n             Implemented Redux\n          </li>\n          <li>\n            Implemented react-redux hooks (useSelector, useDispatch) and useEffects hook\n          </li>\n          <li>\n            <a href=\"https://github.com/yinhowlew/ecommerce-shopping-cart\">\n              Source code\n            </a>\n          </li>    \n          <li>\n            <a href=\"https://github.com/basir/ecommerce-shopping-cart\">\n              Built from Basir's project\n            </a>\n          </li>              \n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { useEffect } from \"react\";\nimport Products from \"./components/Products\";\nimport Filter from \"./components/Filter\";\nimport Basket from \"./components/Basket\";\nimport { useDispatch } from 'react-redux';\nimport { getLocalCart  } from './actions'\n\nimport \"./App.css\";\nimport Copyright from \"./components/Copyright\";\n \n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         getLocalCart: () => dispatch(getLocalCart()),\n//     }  \n// } \n\nconst App = () => {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     // size: \"\",\n  //     // sort: \"\",\n  //     cartItems: [],\n  //     // products: [],\n  //     // filteredProducts: []\n  //   };\n  // }\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (localStorage.getItem(\"cartItems\")) {\n    dispatch(getLocalCart())\n    }\n  })\n\n//   componentDidMount() {\n//     if (localStorage.getItem(\"cartItems\")) {\n//       this.props.getLocalCart();\n//     }\n// }\n\n    // if fetching from json-live server hosting db.json on port 8000\n//     fetch(\"http://localhost:8000/products\")\n//       .then(res => res.json())\n//       // below is if there is no server, then use local file db.json\n//       .catch(err =>\n//         fetch(\"db.json\")\n//           .then(res => res.json())\n//           .then(data => data.products)\n//       )\n//       .then(data => {\n//         this.setState({ \n//           products: data,\n//           filteredProducts: data, \n//         });\n// // removed: this.listProducts(); added filterProducts in setState instead\n//       });\n  // }\n\n  // handleRemoveFromCart = (e, product) => {\n  //   this.setState(state => {\n  //     // so the new cartItems will exclude the removed item\n  //     const cartItems = state.cartItems.filter(a => a.id !== product.id);\n  //     // the new localStorage will have the new cartItems\n  //     localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n  //     return { cartItems: cartItems };\n  //     // can this written without everything being NESTED??? try\n  //   });\n  // };\n\n  // handleAddToCart = (e, product) => {\n  //   this.setState(state => {\n  //     const cartItems = state.cartItems;\n  //     let productAlreadyInCart = false;\n\n  //     cartItems.forEach(cp => {\n  //       if (cp.id === product.id) {\n  //         cp.count += 1;\n  //         productAlreadyInCart = true;\n  //       }\n  //     });\n\n  //     if (!productAlreadyInCart) {\n  //       // meaning pushing an object with properties of product and an additional property of count\n  //       // into the array of objects, called cartItems\n  //       cartItems.push({ ...product, count: 1 });\n  //     }\n  //     // localStorage is used so that if user refreshes the page, cart doesn't get refreshed\n  //     localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n  //     return { cartItems: cartItems };\n  //   });\n  // };\n\n  // listProducts = () => {\n  //   this.setState(state => {\n  //     if (state.sort !== \"\") {\n  //       state.products.sort((a, b) =>\n  //         state.sort === \"lowestprice\"\n  //           ? a.price > b.price\n  //             ? 1\n  //             : -1\n  //           : a.price < b.price\n  //           ? 1\n  //           : -1\n  //       );\n  //     } else {\n  //       state.products.sort((a, b) => (a.id > b.id ? 1 : -1));\n  //     }\n  //     if (state.size !== \"\") {\n  //       return {\n  //         filteredProducts: state.products.filter(\n  //           a => a.availableSizes.indexOf(state.size.toUpperCase()) >= 0\n  //         )\n  //       };\n  //     }\n  //     return { filteredProducts: state.products };\n  //   });\n  // };\n\n  // handleSortChange = e => {\n  //   this.setState({ sort: e.target.value });\n  //   this.listProducts();\n  // };\n\n  // handleSizeChange = e => {\n  //   this.setState({ size: e.target.value });\n  //   this.listProducts();\n  // };\n\n  // render() {\n    return (\n      <div className=\"container\">\n        <h1>E-commerce Shopping Cart Application</h1>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <Filter\n              // count={this.state.filteredProducts.length}\n              // handleSortChange={this.handleSortChange}\n              // handleSizeChange={this.handleSizeChange}\n            />\n            <hr />\n            <Products\n              // products={this.state.filteredProducts}\n              // handleAddToCart={this.handleAddToCart}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <Basket\n              // cartItems={this.state.cartItems}\n              // handleRemoveFromCart={this.handleRemoveFromCart}\n            />\n            <Copyright />\n          </div>\n        </div>\n      </div>\n    );\n  }\n// }\n\nexport default App;\n// export default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { productReducer } from './reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ productReducer })\n\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n// const initialState = {};\n// if (localStorage.getItem(\"cartItems\")) {\n\n//   initialState.cart = {\n//     cartItems: JSON.parse(localStorage.getItem(\"cartItems\"))\n//   };\n// }\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}